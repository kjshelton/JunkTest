var i2c = require('i2c');
var errorHandler = new function(err)
{
    if (err != null)
    {
	console.log('Error caught: ' + err);
    }
};

//SLAVE ADDRESSES
var AD596X_ADDR = 0x0C;

//REGISTER ADDRESSES
var CH_A	= 0x31;
var CH_B	= 0x32;
var CH_C	= 0x33;
var CH_D	= 0x34;

var dac = new i2c(AD596X_ADDR, {device: '/dev/i2c-1'});

function bbbI2C(i2cPath) {
  console.log('I2C Configured...');

}

bbbI2C.prototype.SetValue = function (channel,inValue) {
  //console.log("DAC %d = ", channel,inValue);
  channel = (channel & 0x07) + 0x30;
 //console.log("DAC %x = ", channel,inValue);

  if(inValue > 3.89) inValue = 3.89;
  if(inValue < 1.11) inValue = 1.11;
//  console.log("                     limited Invalue = ", inValue);

  var scaleFactor = 4095.0 / 5.0;
    //console.log("scaleFactor =  ", scaleFactor);
  var scaledValue = inValue * scaleFactor;
    // console.log("scaledValue = ", scaledValue);

  var value = ~~(scaledValue); // truncate to int 

   // console.log("truncated scaled value = %d = %s",value,  value.toString(16));

  //var temp = (((value & 0x0FF0 ) >> 4) >>>0) | (((value & 0x000F) << 12) >>>0);
 var tempA = value & 0x0FF0; // mask middle byte
     tempA = tempA >> 4 >>>0;  // shift to right justify, zero fill
     tempA = tempA & 0xFF;     // make a byte size 
 var tempB = value & 0x0F;     // mask least significat nibble
     tempB = tempB << 4 >>>0;  // shift left one nibble, zero fill
     tempB = tempB & 0xFF;     // make a byte size

 //console.log("DAC A Set to ", tempB.toString(16), "-",tempA.toString(16));
//  dac.writeBytes(CH_A, [0x7F,0xF0], errorHandler);
  dac.writeBytes(channel, [tempA, tempB], errorHandler);
};

bbbI2C.errorHandler = function (error) {
  console.log("Error: " + error.message);
};

module.exports = bbbI2C;
